--- 
wordpress_id: 240
title: Professional Ruby Conference Keynote Notes
wordpress_url: http://litanyagainstfear.com/?p=240
layout: post
category: prorubyconf
---
Part of my series of notes from the <a href="http://www.voicesthatmatter.com/ruby2008/">Professional Ruby Conference</a>. <a href="http://litanyagainstfear.com/blog/2008/11/18/professional-ruby-conference-notes/">See them all here.</a>

This is the keynote of the conference from Obie Fernandez. He's going over the Hashrocket Way, or how he runs his company. Explaining the origins of the hashrocket logo...80s rock. Pretty metal. Going to explain how they work...based on Agile: Extreme programming, scrum, their own experience. Four principles in the manifesto for agile software development:

<strong>Individuals &amp; interactions over processes and tools</strong>

# Pair-programming. They use 2 people in front of one computer, 2 keyboards, 2 mice. Both people that way can code and can be contributors. More productive despite only one workflow. Why? Less interruptions (Twitter, questions, bosses, etc) A lot easier to continue when two people are working on the same thing if one person needs to take a break. Pair programming is a SKILL to be learned! Benefits come out over time, not immediately. Need to work at it. Continous code reviews =&gt; produces high quality code =&gt; less defects and problems. LEVELING UP of knowledge because of working closely with skilled people.
# No interviews. What? No, wait. Phone interviews first. But beyond that, no. Can't figure out how they work until you actually WORK with them. Obviously a bit of a problem...but they should be able to make it if they want the job.
# Don't get too big. He doesn't want the company to get bigger than it is. Rails is productive and the team size can stay small because of it.
# Small teams. 2-4 people. Roles can rotate...generally a designer + a senior person who's overseeing + client = sweet spot of 5-7 people for a team. Very self-organizing.
# Everybody together. No one works remotely at Hashrocket. Ever. They have a Guest Star program to bring in people for fresh ideas. They bring in people on short-term engagements. Just bring them in for a week, brings in new blood, excitement, new thinking.

<strong>Working software over comprehensive documentation</strong>

# TATFT. Test all the fucking time. Showing a snippet from Brian Liles' talk.
# RSpec. Think in terms of specifications. Protection against regression, documentation generated for them in the output.
# Minimum viable product. What's the least you can do to get a working site up. Rails Rumble 2007...powerful constraints, powerful deadlines. Hashrocket builds sites for clients in 3 days flat. How do you do this? If distributed, bring people together in one place.
# Small Releases. Very short release cycles. 2-3 weeks sometimes, but multiple deploys a day for some clients.
#<strong>Customer colloboration over contract negotiation</strong>
# Onsite customer. Talk to them face to face and get them to answer the questions. Find a way to make your environment desirable. (You can see the beach from their office!)
# Visual Design FIRST. They require design documents first. Not exactly an XP practice. They focus on programming not design. Awesome hybrid process graphic...combines steps from classic waterfall with modern, iterative agile methods.
# User stories are used to define requirements. Narratives about features, with acceptance criteria and relative effort required. Provides a backlog of how long tasks take and leads to better estimation. They use 'storycarding' to figure out how long features/tasks will take.
# Master Services Agreement. Way more about this on Obie's blog. Defines the relationship and business partnership. Legalese. Keeps IP property separate. Keep these documents simple...(Doesn't look that way to me).

<strong>Responding to change over following a plan</strong>

# Pivotal Tracker. Cornerstone of his business, and it's free to try! Shows current features and a backlog of current ones. (I wonder how this compares to Lighthouse!)
# Standup meetings. Literally stand up to keep it short. Phone call every day with clients too. Traditional scrum style standup...what are you doing, what did you do.

One more thing...HAVE FUN! Should be fun since Ruby is awesome.
